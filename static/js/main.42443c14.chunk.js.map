{"version":3,"sources":["components/dart.jpg","logo.svg","components/Welcome.jsx","components/Persons.jsx","components/Planets.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Welcome","className","src","Dart","alt","Persons","personWithPlanet","isLoading","onChildClick","favouritesPar","useState","searchTerm","setSearchTerm","searchResults","setSearchResults","favourites","setFavourites","alreadyAdded","setAlreadyAdded","added","setAdded","borderAdded","setBorderAdded","borderAddedFirst","setBorderAddedFirst","useEffect","length","results","filter","person","name","toLowerCase","includes","alreadyAddedMess","addedMess","cssClassFunc","index","personList","map","key","homeworld","birth_year","onClick","pers","newPersArr","some","arrVal","handleAddFavorite","type","placeholder","value","onChange","event","target","Planets","planetsAll","isLoadingPlanets","onChildClickPlanets","favouritesPlanetPar","addedPlanet","setAddedPlanet","console","log","planet","addedPlanetMess","planetsList","climate","terrain","plan","newPlanetArr","App","lengthPersons","setLengthPersons","lengthPlanets","setLenghtPlanets","personAll","setPersonAll","setPlanetsAll","setPersonWithPlanet","setIsLoading","setIsLoadingPlanets","currentScreen","setCurrentScreen","favouritesScreen","valueName","setValueName","valueHomeworld","setValueHomeworld","valueBirthyear","setValueBirthyear","touchedBirthyear","setTouchedBirthyear","touchedHomeWorld","setTouchedHomeWorld","touchedName","setTouchedName","valuePlanetsName","setValuePlanetsName","valuePlanetsClimate","setValuePlanetsClimate","valuePlanetsTerrain","setValuePlanetsTerrain","favouritesPlanets","setFavouritesPlanets","touchedPlanetsName","setTouchedPlanetsName","touchedPlanetsClimate","setTouchedPlanetsClimate","touchedPlanetsTerrain","setTouchedPlanetsTerrain","isValidLength","l","cssClassPlanetsName","cssClassPlanetsClimate","cssClassPlanetsTerrain","btnPlanetsDisable","planetsNameValMess","planetsClimateValMess","planetsTerrainValMess","cssClassName","cssClassHomeworld","isValidNumber","x","maybeNumber","Number","isNaN","cssClassBirthyear","btnName","nameValMess","homeWorldValMess","birthyearValMess","favouritesSections","favouriteListPlanets","added_by","planDel","favouriteListAndFormPlanets","onSubmit","concat","preventDefault","onBlur","disabled","favouriteList","persDel","favouriteListAndForm","favouriteListPersonsPlanets","content","a","axios","respPeople","respPlanets","Math","ceil","data","count","fetchData","personsListToState","i","respPersonsRest","peopleList","u","push","fetchPersonsAll","planetsListToState","respPlanetsRest","fetchPlanetsAll","planetsArr","personsArr","clonedArr1","clonedArr2","k","url","personPlanetFunction","Logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42443c14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dart.6575da5a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.c91748d9.svg\";","import React from 'react';\r\nimport '../App.css';\r\nimport Dart from './dart.jpg';\r\n//prentential component, behövs ingen state\r\n\r\nconst Welcome = () => (\r\n    <section >\r\n        <h3 >WELCOME</h3>\r\n        <span className=\"added-mess\">SEARCH FOR PERSONS OR PLANETS FROM THE STARWARS-UNIVERSE!<br></br>\r\n        ADD THEM TO YOUR FAVOURITELIST OR CREATE YOUR OWN FAVOURITE PLANETS AND CHARACTERS.</span>\r\n\r\n        <img className=\"space-bet-image\" src={Dart} alt='website logo' />\r\n   \r\n    </section>\r\n)\r\n\r\nexport default Welcome;","import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\n\r\nconst Persons = ({personWithPlanet, isLoading, onChildClick, favouritesPar}) => {\r\n//--------------------------------Search\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const handleChange = event => {\r\n  setSearchTerm(event.target.value);\r\n  };\r\n  //--------------------------------FavouriteList\r\n  const [favourites, setFavourites] = useState([])\r\n  const [alreadyAdded, setAlreadyAdded] = useState([]) //Message already added person\r\n\r\n  const [added, setAdded] = useState(['SEARCH OR ADD PLANETS TO FAVOURITELIST']) //Message added person\r\n  const [borderAdded, setBorderAdded] = useState()\r\n  const [borderAddedFirst, setBorderAddedFirst] = useState()\r\n   //--------------------------------Search\r\n// console.log(favouritesPar)\r\n\r\nuseEffect(() => {\r\n  setFavourites(favouritesPar);\r\n  }, [favouritesPar]);\r\n\r\nuseEffect(() => {\r\n  if (personWithPlanet.length > 1 ) {\r\n  const results = personWithPlanet.filter(person =>\r\n      person.name.toLowerCase().includes(searchTerm)\r\n  );\r\n  setSearchResults(results);\r\n  }\r\n  }, [searchTerm,personWithPlanet]);\r\n\r\n//-----------------------------------Favourites\r\n// function deleteFavourite (persDel) {\r\n//   setFavourites(favourites.filter(x => x !== persDel));\r\n// }\r\n\r\nfunction handleAddFavorite (pers, index) {\r\n  let personIncluded = favourites.some(arrVal => pers === arrVal);\r\n  if (!personIncluded) {\r\n  let newPersArr = []\r\n  newPersArr = [...favourites, (pers)];\r\n  // setFavourites(newPersArr)\r\n  onChildClick(newPersArr)\r\n  setAlreadyAdded('')\r\n  setAdded(pers.name + ' ADDED TO FAVOURITELIST')\r\n  setBorderAddedFirst(index)\r\n  } else {\r\n    setAlreadyAdded(pers.name + ' ALREADY ADDED TO FAVOURITELIST')\r\n    setBorderAdded(index)\r\n    setAdded('')\r\n  }\r\n}\r\n//-----------------------------------\r\nconst alreadyAddedMess = (\r\n      <span>{alreadyAdded}</span> \r\n)\r\n\r\nconst addedMess = (\r\n  <span>{added}</span> \r\n)\r\n\r\n\r\n\r\nfunction cssClassFunc (index) {\r\nif(index === borderAdded) {\r\n  let cssFirst = 'addedSelected';\r\n  return cssFirst;\r\n} else if (index === borderAddedFirst){\r\n  let cssSecond = 'item-first-click';\r\n  return cssSecond\r\n} else {\r\n  let cssDefault = 'persons-item';\r\n  return cssDefault\r\n}\r\n}\r\n\r\nconst personList = searchResults.map((person,index) => (\r\n  <div className={cssClassFunc(index)} key={person.name}>\r\n      <span className=\"name-color-size\">{person.name}</span>\r\n      Homeworld: {person.homeworld}<br></br>\r\n      Birth date: {person.birth_year}<br></br>\r\n      {/* <button onClick={() => setFavourites(favourites.concat(person))}>-1</button> */}\r\n      <div>\r\n      <button onClick={() => handleAddFavorite(person, index)}>Add to favourites</button>\r\n      </div>\r\n  </div>\r\n))\r\n\r\n//  const favouriteList = favourites.map((person,index) => (\r\n//   <div key={index}>\r\n//       name={person.name}\r\n//       homeworld={person.homeworld}\r\n//       birth date={person.birth_year}\r\n//       {person.added_by}\r\n//       <button onClick={() => deleteFavourite(person)}>-1</button>\r\n//   </div>\r\n// ))\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <h3 >PERSONS</h3>\r\n    <div className=\"empty-space\"><span className=\"already-added-mess\">{alreadyAddedMess}</span><span className=\"added-mess\">{addedMess}</span></div>\r\n    {/* {favouriteList} */}\r\n    <input type=\"text\"\r\n      placeholder=\"Search\"\r\n      value={searchTerm}\r\n      onChange={handleChange}\r\n    />\r\n\r\n    {isLoading && <p>Wait I'm Loading comments for you</p>}\r\n    <div className=\"persons\">{personList}</div>\r\n  </div>\r\n);\r\n}\r\n\r\n\r\nexport default Persons;","import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\n\r\nconst Planets = ({planetsAll, isLoadingPlanets, onChildClickPlanets, favouritesPlanetPar}) => {\r\n//--------------------------------Search\r\nconst [searchTerm, setSearchTerm] = useState(\"\");\r\nconst [searchResults, setSearchResults] = useState([]);\r\nconst handleChange = event => {\r\n    setSearchTerm(event.target.value);\r\n};\r\n  //--------------------------------FavouriteList\r\nconst [favourites, setFavourites] = useState([])\r\nconst [alreadyAdded, setAlreadyAdded] = useState([''])//Message already added person\r\n\r\nconst [addedPlanet, setAddedPlanet] = useState(['SEARCH OR ADD PERSONS TO FAVOURITELIST']) //Message added person\r\nconst [borderAdded, setBorderAdded] = useState()\r\nconst [borderAddedFirst, setBorderAddedFirst] = useState()\r\n   //--------------------------------Search\r\nconsole.log(favouritesPlanetPar)\r\n\r\nuseEffect(() => {\r\n    setFavourites(favouritesPlanetPar);\r\n}, [favouritesPlanetPar]);\r\n\r\nuseEffect(() => {\r\n    if (planetsAll.length > 1 ) {\r\n    const results = planetsAll.filter(planet =>\r\n    planet.name.toLowerCase().includes(searchTerm)\r\n    );\r\n    setSearchResults(results);\r\n    }\r\n}, [searchTerm,planetsAll]);\r\n\r\n//-----------------------------------Favourites\r\n// function deleteFavourite (planettDel) {\r\n//     setFavourites(favourites.filter(x => x !== planettDel));\r\n// }\r\n\r\nfunction handleAddFavorite (plan, index) {\r\n    let planetIncluded = favourites.some(arrVal => plan === arrVal);\r\n    if (!planetIncluded) {\r\n        let newPlanetArr = []\r\n        newPlanetArr = [...favourites, plan];\r\n        // setFavourites(newPersArr)\r\n        onChildClickPlanets(newPlanetArr)\r\n        setAlreadyAdded('')\r\n        setAddedPlanet(plan.name + ' ADDED TO FAVOURITELIST')\r\n        \r\n        } else {\r\n            setAlreadyAdded(plan.name + ' ALREADY ADDED TO FAVOURITELIST')\r\n            setBorderAdded(index)\r\n            setAddedPlanet('')\r\n        }\r\n}\r\n//-----------------------------------\r\nconst alreadyAddedMess = (\r\n    <span>{alreadyAdded}</span> \r\n)\r\n\r\nconst addedPlanetMess = (\r\n    <span>{addedPlanet}</span> \r\n)\r\n\r\nfunction cssClassFunc (index) {\r\n    if(index === borderAdded) {\r\n      let cssFirst = 'addedSelected';\r\n      return cssFirst;\r\n    } else if (index === borderAddedFirst){\r\n      let cssSecond = 'item-first-click';\r\n      return cssSecond\r\n    } else {\r\n      let cssDefault = 'planets-item';\r\n      return cssDefault\r\n    }\r\n    }\r\n\r\nconst planetsList = searchResults.map((planet,index) => (\r\n<div className={cssClassFunc(index)} key={planet.name}>\r\n    <span className=\"name-color-size\">{planet.name}</span>\r\n    Climate: {planet.climate}<br></br>\r\n    Terrain: {planet.terrain}<br></br>\r\n      {/* <button onClick={() => setFavourites(favourites.concat(person))}>-1</button> */}\r\n    <div>\r\n    <button onClick={() => handleAddFavorite(planet,index)}>Add to favourites</button>\r\n    </div>\r\n</div>\r\n))\r\n\r\n// const favouriteList = favourites.map((planet,index) => (\r\n// <div key={index}>\r\n//     Name={planet.name}\r\n//     Climate={planet.climate}\r\n//     Terrain={planet.terrain}\r\n//     {planet.added_by}\r\n//     <button onClick={() => deleteFavourite(planet)}>-1</button>\r\n// </div>\r\n// ))\r\n\r\nreturn (\r\n    <div className=\"App\">\r\n    <h3>PLANETS</h3>\r\n    <div className=\"empty-space\"><span className=\"already-added-mess\">{alreadyAddedMess}</span><span className=\"added-mess\">{addedPlanetMess}</span></div>\r\n    {/* {favouriteList} */}\r\n    \r\n    <input type=\"text\"\r\n    placeholder=\"Search\"\r\n    value={searchTerm}\r\n    onChange={handleChange}\r\n    />\r\n    \r\n\r\n    {isLoadingPlanets && <p>Wait I'm Loading comments for you</p>}\r\n    \r\n    <div className=\"planets\">{planetsList}</div>\r\n</div>\r\n);\r\n}\r\n\r\n\r\nexport default Planets;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Welcome from './components/Welcome';\nimport Persons from './components/Persons';\nimport Planets from './components/Planets';\nimport Logo from './logo.svg';\n\nfunction App() {\n\n  const [lengthPersons, setLengthPersons] = useState(0);\n  const [lengthPlanets, setLenghtPlanets] = useState(0);\n  //--------------------------------Data from api calls\n  const [personAll, setPersonAll] = useState([]);\n  const [planetsAll, setPlanetsAll] = useState([]);\n  //--------------------------------Homeworldname to persondata\n  const [personWithPlanet, setPersonWithPlanet] = useState([]);\n  //--------------------------------Loadingmessage\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadingPlanets, setIsLoadingPlanets] = useState(true);\n  // const [personsFromChild, setPersonsFromChild] = useState({name: 'hej'});\n  //----------------------------------------From child functions\n  function handleChildClick(newPersArr) {\n    setFavourites(newPersArr)\n  }\n  function handlePlanetsChildClick(newPlanetArr) {\n    setFavouritesPlanets(newPlanetArr)\n  }\n  \n  //----------------------------------------SetScreen\n  const WELCOME = 'welcome', PERSONS = 'Persons', PLANETS = 'Planets', FAVORITES = 'Favourites',\n  ADDSHOWPERSONS = 'Addshowpersons', ADDSHOWPLANETS = 'Addshowplanets';\n  // questions: [{ questions, possible answears, which i scorrect }]\n  const [currentScreen, setCurrentScreen] = useState(WELCOME);\n  \n  const welcomeScreen = () => { \n    setCurrentScreen(WELCOME)\n  }\n  const personsScreen = () => { \n    setCurrentScreen(PERSONS)\n  }\n  const planetsScreen = () => { \n    setCurrentScreen(PLANETS)\n  }\n  const favouritesScreen = () => { \n    setCurrentScreen(FAVORITES)\n  }\n  const addShowPersonScreen = () => {\n    setCurrentScreen(ADDSHOWPERSONS)\n  }\n  const addShowPlanetsScreen = () => {\n    setCurrentScreen(ADDSHOWPLANETS)\n  }\n  \n//--------------------------------------------------------Persons\nconst [valueName, setValueName] = useState([]);\nconst [valueHomeworld, setValueHomeworld] = useState([]);\nconst [valueBirthyear, setValueBirthyear] = useState([]);\nconst [favourites, setFavourites] = useState([])\n\nconst [touchedBirthyear, setTouchedBirthyear] = useState(false);\nconst [touchedHomeWorld, setTouchedHomeWorld] = useState(false);\nconst [touchedName, setTouchedName] = useState(false);\n\n//fav\nconst handleChangeFormName = event => {\n  setValueName(event.target.value);\n};\nconst handleChangeFormHomeworld = event => {\n  setValueHomeworld(event.target.value);\n};\nconst handleChangeFormBirthyear = event => {\n  setValueBirthyear(event.target.value);\n};\n\n//------------------------------------------------------Planets\nconst [valuePlanetsName, setValuePlanetsName] = useState([]);\nconst [valuePlanetsClimate, setValuePlanetsClimate] = useState([]);\nconst [valuePlanetsTerrain, setValuePlanetsTerrain] = useState([]);\nconst [favouritesPlanets, setFavouritesPlanets] = useState([])\n\nconst [touchedPlanetsName, setTouchedPlanetsName] = useState(false);\nconst [touchedPlanetsClimate, setTouchedPlanetsClimate] = useState(false);\nconst [touchedPlanetsTerrain, setTouchedPlanetsTerrain] = useState(false);\n\nconst handleChangeFormPlanetsName = event => {\n  setValuePlanetsName(event.target.value);\n};\nconst handleChangeFormPlanetsClimate = event => {\n  setValuePlanetsClimate(event.target.value);\n};\nconst handleChangeFormPlanetsTerrain = event => {\n  setValuePlanetsTerrain(event.target.value);\n};\n\n//----------------------------------Validation Planet\nconst isValidLength = l => {\n  if  (l.length < 2 || l.length > 20) \n  return false;\n  else \n  return true;\n}\n\nlet cssClassPlanetsName = '';\nif( touchedPlanetsName ) {\n  if( isValidLength(valuePlanetsName) )\n    cssClassPlanetsName = 'valid';\n  else\n    cssClassPlanetsName = 'invalid'\n}\n\nlet cssClassPlanetsClimate = '';\nif( touchedPlanetsClimate ) {\n  if( isValidLength(valuePlanetsClimate) )\n    cssClassPlanetsClimate = 'valid';\n  else\n    cssClassPlanetsClimate = 'invalid'\n}\n\nlet cssClassPlanetsTerrain = '';\nif( touchedPlanetsTerrain ) {\n  if( isValidLength(valuePlanetsTerrain) )\n    cssClassPlanetsTerrain = 'valid';\n  else\n    cssClassPlanetsTerrain = 'invalid'\n}\n\n\n\nlet btnPlanetsDisable = true;\nif( touchedPlanetsName) {\n  if( isValidLength(valuePlanetsName) )\n  btnPlanetsDisable = false;\n  else\n  btnPlanetsDisable = true;\n}\n\nif( touchedPlanetsClimate ) {\n  if( isValidLength(valuePlanetsClimate) )\n    btnPlanetsDisable = false;\n  else\n    btnPlanetsDisable = true;\n}\n\nif( touchedPlanetsTerrain ) {\n  if( isValidLength(valuePlanetsTerrain) )\n    btnPlanetsDisable = false;\n  else\n    btnPlanetsDisable = true;\n}\n\n\n\nlet planetsNameValMess = '';\nif( touchedPlanetsName ) {\n  if( isValidLength(valuePlanetsName) )\n  planetsNameValMess = ''\n  else\n  planetsNameValMess = 'Please add at least 3 characters and max 20'\n}\n\nlet planetsClimateValMess = '';\nif( touchedPlanetsClimate ) {\n  if( isValidLength(valuePlanetsClimate) )\n  planetsClimateValMess = ''\n  else\n  planetsClimateValMess = 'Please add at least 3 characters and max 20'\n}\n\nlet planetsTerrainValMess = '';\nif( touchedPlanetsTerrain ) {\n  if( isValidLength(valuePlanetsTerrain) )\n    planetsTerrainValMess = ''\n  else\n    planetsTerrainValMess = 'Please add at least 3 characters and max 20'\n}\n//----------------------------------Validation Person\n\n\nlet cssClassName = '';\nif( touchedName ) {\n  if( isValidLength(valueName) )\n    cssClassName = 'valid';\n  else\n    cssClassName = 'invalid'\n}\n\nlet cssClassHomeworld = '';\nif( touchedHomeWorld ) {\n  if( isValidLength(valueHomeworld) )\n    cssClassHomeworld = 'valid';\n  else\n    cssClassHomeworld = 'invalid'\n}\n\nconst isValidNumber = x => {\n  let maybeNumber = Number(x);\n  if (x.length < 1 || x.length > 3) \n  return false;\n  return !isNaN(maybeNumber)\n\n}\nlet cssClassBirthyear = '';\nif( touchedBirthyear ) {\n  if( isValidNumber(valueBirthyear) )\n    cssClassBirthyear = 'valid';\n  else\n    cssClassBirthyear = 'invalid'\n}\n\n\n\nlet btnName = true;\nif( touchedName ) {\n  if( isValidLength(valueName) )\n  btnName = false;\n  else\n  btnName = true;\n}\n\nif( touchedHomeWorld ) {\n  if( isValidLength(valueHomeworld) )\n    btnName = false;\n  else\n    btnName = true;\n}\n\nif( touchedBirthyear ) {\n  if( isValidNumber(valueBirthyear) )\n    btnName = false;\n  else\n    btnName = true;\n}\n\n\n\nlet nameValMess = '';\nif( touchedName ) {\n  if( isValidLength(valueName) )\n  nameValMess = ''\n  else\n  nameValMess = 'Please add at least 3 characters and max 20'\n}\n\nlet homeWorldValMess = '';\nif( touchedHomeWorld ) {\n  if( isValidLength(valueHomeworld) )\n  homeWorldValMess = ''\n  else\n  homeWorldValMess = 'Please add at least 3 characters and max 20'\n}\n\nlet birthyearValMess = '';\nif( touchedBirthyear ) {\n  if( isValidNumber(valueBirthyear) )\n    birthyearValMess = ''\n  else\n    birthyearValMess = 'Please add(only numbers) atleast 1 digit and max 3'\n}\n\n\n  const handleSubmit = event => {\n  if (valueName && valueHomeworld && valueBirthyear) {\n    setFavourites(favourites.concat({\n      name: valueName, \n      homeworld: valueHomeworld, \n      birth_year: valueBirthyear + 'BBY',\n      added_by: 'Added by user'\n    }));\n  }\n\n  setValueName('');\n  setValueHomeworld('');\n  setValueBirthyear('');\n  setTouchedBirthyear(false)\n  setTouchedHomeWorld(false);\n  setTouchedName(false);\n\n  event.preventDefault();\n};\n//favend\n\nfunction deleteFavourite (persDel) {\n  setFavourites(favourites.filter(x => x !== persDel));\n}\n\n\n  const handleSubmitPlanets = event => {\n  if (valuePlanetsName && valuePlanetsClimate && valuePlanetsTerrain) {\n      setFavouritesPlanets(favouritesPlanets.concat({\n      name: valuePlanetsName, \n      climate: valuePlanetsClimate, \n      terrain: valuePlanetsTerrain,\n      added_by: 'Added by user'\n    }));\n  }\n\n  setValuePlanetsName('');\n  setValuePlanetsClimate('');\n  setValuePlanetsTerrain('');\n  setTouchedPlanetsName(false);\n  setTouchedPlanetsClimate(false);\n  setTouchedPlanetsTerrain(false);\n\n  event.preventDefault();\n};\n//favend\n\nfunction deleteFavouritePlanets (planDel) {\n  setFavouritesPlanets(favouritesPlanets.filter(x => x !== planDel));\n}\n\n\n//----------------------------Favourites\nconst favouritesSections = (\n  <div>\n  <button className=\"btn-menue\" onClick={addShowPersonScreen}> Add/Show Favourite Person(s) </button>\n  <button className=\"btn-menue\" onClick={addShowPlanetsScreen}> Add/Show Favourite Planet(s) </button>\n  <button className=\"btn-menue\" onClick={favouritesScreen}> Show All Favourites </button>\n  </div>\n)\n\n//-------------------------------------------------Planets Fav\nconst favouriteListPlanets = favouritesPlanets.map((planet,index) => (\n  <div className=\"planets-item\" key={index}>\n      <span className=\"name-color-size\">{planet.name}</span>\n      Climate: {planet.climate} <br></br>\n      Terrain: {planet.terrain} <br></br>\n      {planet.added_by}\n      <div>\n      <button onClick={() => deleteFavouritePlanets(planet)}>Delete</button>\n      </div>\n  </div>\n))\n\nconst favouriteListAndFormPlanets = (\n  <div>\n  {favouritesSections}\n  <h3 >ADD PLANET</h3>\n  <form className=\"flexRowShow\" onSubmit={handleSubmitPlanets}>\n  <span>{planetsNameValMess}</span>\n  <input type=\"text\" className={cssClassPlanetsName} value={valuePlanetsName} placeholder=\"Input Planet Name\"\n  onChange={handleChangeFormPlanetsName} onBlur={event => setTouchedPlanetsName(true)} />\n  \n  <span>{planetsClimateValMess}</span>\n  <input type=\"text\" className={cssClassPlanetsClimate} value={valuePlanetsClimate} placeholder=\"Input Climate\"\n  onChange={handleChangeFormPlanetsClimate} onBlur={event => setTouchedPlanetsClimate(true)} />\n  \n  <span>{planetsTerrainValMess}</span>\n  <input type=\"text\" className={cssClassPlanetsTerrain} value={valuePlanetsTerrain} placeholder=\"Input Terrain\"\n  onChange={handleChangeFormPlanetsTerrain} onBlur={event => setTouchedPlanetsTerrain(true)} />\n  \n  <button disabled={btnPlanetsDisable} type=\"submit\">Add Planet</button>\n  </form>\n  <h3 className=\"line-over\">FAVOURITELIST PLANETS</h3>\n  <div className=\"planets\">{favouriteListPlanets}</div>\n  </div>\n      )\n//-------------------------------------------------Person Fav\n\nconst favouriteList = favourites.map((person,index) => (\n  <div className=\"persons-item\" key={index}>\n      <span className=\"name-color-size\">{person.name}</span>\n      Homeworld: {person.homeworld}<br></br>\n      Birh Date: {person.birth_year}<br></br>\n      {person.added_by}\n      <div>\n      <button onClick={() => deleteFavourite(person)}>Delete</button>\n      </div>\n  </div>\n))\n\nconst favouriteListAndForm = (\n  <div>\n    {favouritesSections}\n    <h3>ADD PERSON</h3>\n    <form className=\"flexRowShow\" onSubmit={handleSubmit}>\n    \n    <span>{nameValMess}</span>\n    <input type=\"text\" className={cssClassName} value={valueName} placeholder=\"Input Name\"\n    onChange={handleChangeFormName} onBlur={event => setTouchedName(true)} />\n\n    <span>{homeWorldValMess}</span>\n    <input type=\"text\" className={cssClassHomeworld} value={valueHomeworld} placeholder=\"Input Homeworld\"\n    onChange={handleChangeFormHomeworld} onBlur={event => setTouchedHomeWorld(true)} />\n\n    <span>{birthyearValMess}</span>\n    <input type=\"text\" className={cssClassBirthyear} value={valueBirthyear} placeholder=\"Input Birthyear\"\n    onChange={handleChangeFormBirthyear} onBlur={event => setTouchedBirthyear(true)} />\n\n    <button disabled={btnName} type=\"submit\">ADD PERSON</button>\n    </form>\n    <h3 className=\"line-over\">FAVOURITELIST PERSONS</h3>\n    <div className=\"persons\">{favouriteList}</div>\n  </div>\n)\n//-------------------------------------------------Person Fav\n\nconst favouriteListPersonsPlanets = (\n  <div>\n  {favouritesSections}\n  <h3>ALL FAVOURITES</h3>\n  <h4 className=\"line-over\">FAVOURITELIST PERSONS</h4>\n  <div className=\"planets\">{favouriteList}</div>\n  <h4 className=\"line-over\">FAVOURITELIST PLANETS</h4>\n  <div className=\"persons\">{favouriteListPlanets}</div>\n  </div>\n)\n//----------------------------Favourites End\n\n//--------------------------------------------------------------Screen\n  let content = null;\n  switch (currentScreen) {\n      case WELCOME:\n          content = ( <Welcome /> )\n          break;\n      case PERSONS:\n          content = ( <Persons\n          personWithPlanet= {personWithPlanet} // Ordered List from api\n          isLoading={isLoading} // Show when loading boolean, under favorite from persons callback\n          onChildClick={handleChildClick}\n          favouritesPar={favourites} /> )\n          break;\n      case PLANETS:\n          content = ( <Planets\n          planetsAll= {planetsAll} // Ordered List from api\n          isLoadingPlanets={isLoadingPlanets} // Show when loading boolean, under favorite from persons callback\n          onChildClickPlanets={handlePlanetsChildClick}\n          favouritesPlanetPar={favouritesPlanets} /> )\n          break;\n      case FAVORITES:\n          content = ( favouriteListPersonsPlanets )\n          break;\n      case ADDSHOWPERSONS:\n            content = ( favouriteListAndForm )\n            break;\n      case ADDSHOWPLANETS:\n            content = ( favouriteListAndFormPlanets )\n            break;\n      default:\n          content = ( <Welcome /> )\n}\n//-----------------------------------Screen End\n\n//-----------------------------------Get lenghts\nuseEffect(() => { \n  const fetchData = async () => {\n    const respPeople = await axios(\n      `https://swapi.dev/api/people/`\n    );\n    const respPlanets = await axios(\n      `https://swapi.dev/api/planets/`\n    );\n    setLengthPersons(Math.ceil(respPeople.data.count / respPeople.data.results.length))\n    setLenghtPlanets(Math.ceil(respPlanets.data.count / respPeople.data.results.length))\n       // console.log(respPeople.data)\n       // console.log(respPlanets.data)\n    };\n    fetchData(); \n  }, []);\n\n//-----------------------------------Get persons\nuseEffect(() => {\n  const fetchPersonsAll= async () => {\n    const personsListToState = [];\n    for(let i=1; i <= lengthPersons ; i++) { \n      \n      const respPersonsRest = await axios(\n        `https://swapi.dev/api/people/?page=${i}`\n      );\n      const peopleList = (await (respPersonsRest.data.results))\n      for(let u=0; u < peopleList.length; u++) {\n        personsListToState.push(peopleList[u])\n        }\n         // setPersonAll(respPersonsRest.data.results);\n         // console.log(respPersonsRest.data)\n      };\n      setPersonAll(personsListToState);\n      //console.log(personsListToState)\n    };\n    fetchPersonsAll();\n  }, [lengthPersons]);\n\n//-----------------------------------Get planets\nuseEffect(() => {\n  const fetchPlanetsAll= async () => {\n    const planetsListToState = [];\n    for(let i=1; i <= lengthPlanets; i++) { \n    \n      const respPlanetsRest = await axios(\n        `https://swapi.dev/api/planets/?page=${i}`\n      );\n      const planetsList = (await (respPlanetsRest.data.results))\n      for(let u=0; u < planetsList.length; u++) {\n        planetsListToState.push(planetsList[u])\n      }\n    };\n    setPlanetsAll(planetsListToState);\n    setIsLoadingPlanets(false)\n    //console.log(planetsListToState)\n  };\n  fetchPlanetsAll();\n}, [lengthPlanets]);\n\n//-----------------------------------Put homeworl in place instead of URL\nconst personPlanetFunction = (planetsArr, personsArr) => {\n  const clonedArr1= [...planetsArr];\n  const clonedArr2= [...personsArr]; \n  for (var i = 0; i < clonedArr2.length; i++) {\n      for (var k = 0; k < clonedArr1.length; k++) {\n          if (clonedArr2[i].homeworld === clonedArr1[k].url) {\n          clonedArr2[i].homeworld = clonedArr1[k].name;\n          break;\n          }\n      }\n      setIsLoading(false);\n  }\n  setPersonWithPlanet(clonedArr2)\n  //console.log(clonedArr2)\n}\n\nuseEffect(() => {\n  personPlanetFunction(planetsAll,personAll)\n}, [personAll, planetsAll]);\n\n\n\n  return (\n    <div className=\"App\">\n\n      <header className=\"App-header\">\n          <img src={Logo} alt='website logo' />\n      <div className=\"navDiv\">\n      <nav>\n      <button onClick={welcomeScreen}> Home </button>\n      <button onClick={personsScreen}> Persons </button>\n      <button onClick={planetsScreen}> Planets </button>\n      <button onClick={favouritesScreen}> Favourites </button>\n      </nav>\n      </div>\n      </header>\n      <main>\n        <div className=\"main-widht\">{content}</div>\n      </main>\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}